import os.path
import csv

friendly_map = {
    "IO_L4P_T0_D04_14": "dac_word",
    "IO_L4N_T0_D05_14": "dac_data",
    "IO_L5P_T0_D06_14": "dac_bclk",
    "IO_L5N_T0_D07_14": "dac_clk",
    "IO_L7P_T0_D04_14": "spi_mosi",
    "IO_L7N_T0_D05_14": "spi_miso",
    "IO_L8P_T0_D06_14": "spi_clk",
    "IO_L8P_T0_D07_14": "spi_cs",
    "IO_L9P_T1_DQS_14": "led_red",
    "IO_L9N_T1_DQS_D13_14": "led_green",
    "IO_L10P_T1_D14_14": "mcu[0]",
    "IO_L10N_T1_D15_14": "mcu[1]",
    "IO_L11N_T1_SRCC_14": "mcu[2]",
}


def friendly(name):
        return friendly_map.get(name, name.lower())


if __name__ == "__main__":
    with open(os.path.join(os.path.dirname(__file__), "xc7a100tftg256pkg.csv"), newline='') as csvfile:
        # Skip first two lines
        header = csvfile.readline().rstrip("\n,")
        csvfile.readline()
        reader = csv.DictReader(csvfile)
        out = []
        with open(os.path.join(os.path.dirname(__file__), "xc7a100tftg256pkg-sadie.xdc"), mode='w') as f:
            f.write("## Artix 7 100T constraints file, autogenerated for SADIE\n")
            f.write(f"## {header}\n\n")
            for row in reader:
                if row['I/O Type'] != "HR":
                    continue
                if not row['Pin'] or row['Pin'] == "Total Number of Pins":
                    continue
                res = f"#set_property --dict {{ PACKAGE_PIN {row['Pin'].ljust(5)} IOSTANDARD LVCMOS33 }}" \
                      f" [get_ports {{ {friendly(row['Pin Name'])} }}]; #{row['Pin Name']}\n"
                if row['Pin Name'] in friendly_map:
                    out.append(res[1:])  # uncomment
                else:
                    out.append(res)
            out.sort(reverse=True)
            f.write("".join(out))

